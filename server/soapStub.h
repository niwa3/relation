/* soapStub.h
   Generated by gSOAP 2.8.16 from RManager.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"urn:rm"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20816
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__relation
#define SOAP_TYPE_ns1__relation (10)
/* ns1:relation */
class SOAP_CMAC ns1__relation
{
public:
	std::vector<std::string >node_id;	/* required element of type xsd:anyURI */
	std::vector<std::string >service_id;	/* required element of type xsd:anyURI */
	int relation_id;	/* required attribute */
	std::string anonymous_method;	/* required attribute */
	std::string privacy_lvl;	/* required attribute */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns1__relation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__relation() { ns1__relation::soap_default(NULL); }
	virtual ~ns1__relation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__body
#define SOAP_TYPE_ns1__body (11)
/* ns1:body */
class SOAP_CMAC ns1__body
{
public:
	std::vector<ns1__relation * >relation;	/* optional element of type ns1:relation */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns1__body */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__body() { ns1__body::soap_default(NULL); }
	virtual ~ns1__body() { }
};
#endif

#ifndef SOAP_TYPE_ns1__header
#define SOAP_TYPE_ns1__header (12)
/* ns1:header */
class SOAP_CMAC ns1__header
{
public:
	std::string massage;	/* required attribute */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__header */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__header() { ns1__header::soap_default(NULL); }
	virtual ~ns1__header() { }
};
#endif

#ifndef SOAP_TYPE_ns1__transport
#define SOAP_TYPE_ns1__transport (13)
/* ns1:transport */
class SOAP_CMAC ns1__transport
{
public:
	ns1__header *header;	/* required element of type ns1:header */
	ns1__body *body;	/* required element of type ns1:body */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns1__transport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__transport() { ns1__transport::soap_default(NULL); }
	virtual ~ns1__transport() { }
};
#endif

#ifndef SOAP_TYPE__ns1__dataRQ
#define SOAP_TYPE__ns1__dataRQ (14)
/* ns1:dataRQ */
class SOAP_CMAC _ns1__dataRQ
{
public:
	ns1__transport *transport;	/* required element of type ns1:transport */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__ns1__dataRQ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__dataRQ() { _ns1__dataRQ::soap_default(NULL); }
	virtual ~_ns1__dataRQ() { }
};
#endif

#ifndef SOAP_TYPE__ns1__dataRS
#define SOAP_TYPE__ns1__dataRS (15)
/* ns1:dataRS */
class SOAP_CMAC _ns1__dataRS
{
public:
	ns1__transport *transport;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:transport */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__ns1__dataRS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__dataRS() { _ns1__dataRS::soap_default(NULL); }
	virtual ~_ns1__dataRS() { }
};
#endif

#ifndef SOAP_TYPE_ns1__data
#define SOAP_TYPE_ns1__data (25)
/* ns1:data */
struct ns1__data
{
public:
	_ns1__dataRQ *req;	/* optional element of type ns1:dataRQ */
public:
	int soap_type() const { return 25; } /* = unique id SOAP_TYPE_ns1__data */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (26)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 26; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (27)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 27; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (29)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 29; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (32)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 32; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (33)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 33; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (9)
typedef std::string xsd__anyURI;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
